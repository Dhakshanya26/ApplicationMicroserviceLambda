{
  "Comment": "A description of my state machine",
  "StartAt": "Pass input",
  "States": {
    "Pass input": {
      "Type": "Pass",
      "Next": "Parallel"
    },
    "Parallel": {
      "Type": "Parallel",
      "Next": "Get Application details",
      "Branches": [
        {
          "StartAt": "Get Credit Data",
          "States": {
            "Get Credit Data": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${GetCustomerCreditDataFunction}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "ResultPath": "$.CreditScore",
              "ResultSelector": {
                "Score.$": "States.StringToJson($.Payload.body)"
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "GetFraudData",
          "States": {
            "GetFraudData": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${GetCustomerFraudDataFunction}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "ResultSelector": {
                "Score.$": "States.StringToJson($.Payload.body)"
              },
              "ResultPath": "$.FraudScore",
              "End": true
            }
          }
        }
      ],
      "ResultPath": "$.CalculatedScore",
      "ResultSelector": {
        "CreditScore.$": "$[0].CreditScore.Score.creditscore",
        "FraudScore.$": "$[1].FraudScore.Score.fraudscore"
      }
    },
    "Get Application details": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "Applications",
        "Key": {
          "Id": {
            "S.$": "$.Id"
          }
        }
      },
      "Next": "Save Credit and Fraud score",
      "ResultPath": "$.ApplicationDetail"
    },
    "Save Credit and Fraud score": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "ApplicationStatus",
        "Item": {
          "Id": {
            "S.$": "$.Id"
          },
          "ApplicationId": {
            "S.$": "$.Id"
          },
          "ApplicationStatus": {
            "S": "Pending"
          },
          "CreditScore": {
            "S.$": "States.Format('{}',$.CalculatedScore.CreditScore)"
          },
          "FraudScore": {
            "S.$": "States.Format('{}',$.CalculatedScore.FraudScore)"
          }
        }
      },
      "Next": "Calculate total score",
      "ResultPath": "$.AfterScore",
      "ResultSelector": {}
    },
    "Calculate total score": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${CalculateTotalScoreFunction}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Is Approved?",
      "ResultSelector": {
        "CalculatedScore.$": "States.StringToJson($.Payload.body)"
      }
    },
    "Is Approved?": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.CalculatedScore.loanAmount",
              "NumericLessThan": 100
            },
            {
              "Variable": "$.CalculatedScore.totalscore",
              "NumericEquals": 2
            }
          ],
          "Next": "Save Approved status"
        }
      ],
      "Default": "Save Decline status"
    },
    "Save Approved status": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "ApplicationStatus",
        "Key": {
          "Id": {
            "S.$": "$.CalculatedScore.id"
          }
        },
        "UpdateExpression": "SET ApplicationStatus = :status",
        "ExpressionAttributeValues": {
          ":status": {
            "S": "Approved"
          }
        }
      },
      "End": true
    },
    "Save Decline status": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "ApplicationStatus",
        "Key": {
          "Id": {
            "S.$": "$.CalculatedScore.id"
          }
        },
        "UpdateExpression": "SET ApplicationStatus = :status",
        "ExpressionAttributeValues": {
          ":status": {
            "S": "declined"
          }
        }
      },
      "End": true
    }
  }
}