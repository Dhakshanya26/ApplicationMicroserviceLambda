AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  createloanapplication

  Sample SAM Template for createloanapplication

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Parameters:
  ParameterInstancePrefix:
    Type: String
    Default: "loan"
    Description: "Prefix to be used in names of the things created by this stack."

Resources:
  GetCustomerCreditDataFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: CustomerCreditData/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
  GetCustomerFraudDataFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: CustomerFraudData/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64

  CalculateTotalScoreFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: CalculateTotalScore/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64          

  LoanApplicationFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: CreateLoanApplication/
      Handler: createloanapp.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        LoanApplication:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /loanapplication
            Method: post
      Policies:
      # Give the Lambda service access to poll your DynamoDB Stream
        - AmazonDynamoDBFullAccess
        - AmazonEventBridgeFullAccess

  GetAppStatusFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ApplicationStatus/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        AppStatus:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /applicationstatus
            Method: get
      Policies:
      # Give the Lambda service access to poll your DynamoDB Stream
        - AmazonDynamoDBFullAccess
        - AmazonEventBridgeFullAccess

  # CloudWatch Log Group
  LoanAppEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: LoanAppEventBus
  AccountsLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 3
      LogGroupName: !Join [ "", ["/aws/events/", !Ref ParameterInstancePrefix,"-","accounts-logs"]]
  CustomerServiceLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 3
      LogGroupName: !Join [ "", ["/aws/events/", !Ref ParameterInstancePrefix,"-","customer-service-logs"]]   

  StateMachinesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 3
      LogGroupName: !Join [ "", ["/aws/states/", !Ref ParameterInstancePrefix,"-", "statemachine-logs"]]


  # Step Function
  AppStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/application.asl.json
      DefinitionSubstitutions:
        CentralEventBusName: !Ref LoanAppEventBus
        GetCustomerCreditDataFunction: !GetAtt  GetCustomerCreditDataFunction.Arn
        GetCustomerFraudDataFunction: !GetAtt  GetCustomerFraudDataFunction.Arn
        CalculateTotalScoreFunction: !GetAtt  CalculateTotalScoreFunction.Arn 
      Policies:
        - AWSXRayDaemonWriteAccess
        - AWSLambda_FullAccess
        - AmazonDynamoDBFullAccess
        - CloudWatchFullAccess
        - AmazonEventBridgeFullAccess 
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt  StateMachinesLogGroup.Arn
        Level: ALL
        IncludeExecutionData: True
      Tracing:
        Enabled: True
      Events:
        SubmittedRule:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref LoanAppEventBus
            InputPath: $.detail
            Pattern:
              source:
                  - com.aws.accounts
              detail-type:
                  - Loan Application Submitted
              account:
                  - !Ref AWS::AccountId

  LoanAppSubmittedRule:
    Type: AWS::Events::Rule
    Properties:
      Name: LoanAppSubmittedRule
      EventBusName: !GetAtt LoanAppEventBus.Arn
      State: ENABLED
      Targets:
        - Arn: !GetAtt AppStateMachine.Arn
          Id: "AppStateMachine"
          RoleArn: !GetAtt 
            - EventBridgeIAMrole
            - Arn
      EventPattern:
        source:
          - com.aws.submitloanapp
 
  EventBridgeIAMrole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub events.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: / 
      Policies:
        - PolicyName: AccessStepFunction
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "cloudwatch:*"
                  - "logs:*"
                  - "lambda:InvokeFunction"
                  - "events:PutEvents"
                  - "events:*"
                  - "schemas:*"
                  - "scheduler:*"
                Resource: 
                  - "*"

    # Rule process events published by the state machine
  AccountKycResponseRule:
    Type: AWS::Events::Rule
    Properties:
      Name: acc_kyc_response_rule
      Description: Rule to process results of KYC.
      EventBusName: !Ref LoanAppEventBus
      EventPattern:
        source:
          - com.aws.kyc
        detail-type:
          - New account approved
          - New account declined
      State: ENABLED
      RoleArn: !GetAtt WriteToCwlRole.Arn
      Targets: 
        - Id: SendToAccountsLogGroup
          Arn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AccountsLogGroup}"

  AccountKycIdCheckRule:
    Type: AWS::Events::Rule
    Properties:
      Name: acc_kyc_id_check_rule
      Description: Rule to process KYC response.
      EventBusName: !Ref LoanAppEventBus
      EventPattern:
        source:
          - com.aws.kyc
        detail-type:
          - Identity check completed
      State: ENABLED
      RoleArn: !GetAtt WriteToCwlRole.Arn
      Targets: 
        - Id: SendToAccountsLogGroup
          Arn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AccountsLogGroup}"
  
  
  CustomerServiceKycApprovedRule:
    Type: AWS::Events::Rule
    Properties:
      Name: cs_kyc_approved_rule
      Description: Rule to process KYC response.
      EventBusName: !Ref LoanAppEventBus
      EventPattern:
        source:
          - com.aws.kyc
        detail-type:
          - New account approved
      State: ENABLED
      RoleArn: !GetAtt WriteToCwlRole.Arn
      Targets: 
        - Id: SendToCustomerServiceLogGroup
          Arn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CustomerServiceLogGroup}"
  
  WriteToCwlRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: WriteToAccountsLogGroup
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStreams'
                  - 'logs:PutLogEvents'
                Resource: 
                  - !GetAtt AccountsLogGroup.Arn
                  - !GetAtt CustomerServiceLogGroup.Arn


Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  LoanApplicationApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/loanapplication/"

  AppStatusApi:
    Description: "API Gateway endpoint URL for Get stage for Application status"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/applicationstatus/"
  LoanApplicationFunction:
    Description: "LoanApplication Lambda Function ARN"
    Value: !GetAtt LoanApplicationFunction.Arn
  LoanApplicationFunctionIamRole:
    Description: "Implicit IAM Role created for LoanApplication function"
    Value: !GetAtt LoanApplicationFunctionRole.Arn
 
